import pandas as pd
from py2neo import Graph, Node, Relationship, NodeMatcher
import numpy as np



# "MATCH (a:algo {algorithm: "gdb"}), MATCH (b:algo) WHERE apoc.text.jaroWinklerDistance(a.algorithm, b.algorithm) >= 0.1 AND b.algorithm = a.algorithm WITH head(collect([a,b])) as nodes CALL apoc.refactor.mergeNodes(nodes,{properties:"combine", mergeRels:true}) yield node MATCH (a)-[:uses]->(b) RETURN a, b;"
graph = Graph("bolt://localhost:7687", user="neo4j", password="1234")
ml_data = pd.read_csv('merged_MLoutput.csv')
ml_dicts = ml_data.to_dict('records')
for i in range(len(ml_dicts)):
    ml_dict = ml_dicts[i]
    print(ml_dict['algorithm'])
    tx = graph.begin()
    algo = Node("algo", algorithm=ml_dict['algorithm'])
    tx.create(algo)
    data = Node("data", data=ml_dict['dataset'])
    tx.create(data)
    target = Node("target", target=ml_dict['target'])
    tx.create(target)
    feat_meth = Node("featmeth", feat_meth=ml_dict['feat_meth'])
    tx.create(feat_meth)
    feat_time = Node("feattime", feat_time=ml_dict['feat_time'])
    tx.create(feat_time)
    tuned = Node("tuned", tuned=ml_dict['tuned'])
    tx.create(tuned)
    feature_list = Node("featurelist", feature_list=ml_dict['feature_list'])
    tx.create(feature_list)
    regressor = Node("regressor", regressor=ml_dict['regressor'])
    tx.create(regressor)
    tunetime = Node("tunetime", tunetime=ml_dict['tuneTime'])
    tx.create(tunetime)
    r2_avg = Node("r2avg", r2_avg=ml_dict['r2_avg'])
    tx.create(r2_avg)
    r2_std = Node("r2std", r2_std=ml_dict['r2_std'])
    tx.create(r2_std)
    mse_avg = Node("mseavg", mse_avg=ml_dict['mse_avg'])
    tx.create(mse_avg)
    mse_std = Node("msestd", mse_std=ml_dict['mse_std'])
    tx.create(mse_std)
    rmse_avg = Node("rmseavg", rmse_avg=ml_dict['rmse_avg'])
    tx.create(rmse_avg)
    rmse_std = Node("rmsestd", rmse_std=ml_dict['rmse_std'])
    tx.create(rmse_std)
    time_avg = Node("timeavg", time_avg=ml_dict['time_avg'])
    tx.create(time_avg)
    time_std = Node("timestd", time_std=ml_dict['time_std'])
    tx.create(time_std)
    ab = Relationship(data, "uses", algo)
    tx.merge(ab)
    ac = Relationship(data, "experimental", target)
    tx.merge(ac)
    ad = Relationship(data, "generates", feat_meth)
    tx.merge(ad)
    ae = Relationship(feat_meth, "feat_time", feat_time)
    tx.merge(ae)
    af = Relationship(feat_meth, "means", feature_list)
    tx.merge(af)
    ag = Relationship(data, "tuned", tuned)
    tx.merge(ag)
    ah = Relationship(tuned, "params", regressor)
    tx.merge(ah)
    ai = Relationship(tuned, "tunetime", tunetime)
    tx.merge(ai)
    aj = Relationship(regressor, "r2_std", r2_std)
    tx.merge(aj)
    ak = Relationship(regressor, "r2_avg", r2_avg)
    tx.merge(ak)
    al = Relationship(regressor, "mse_std", mse_std)
    tx.merge(al)
    am = Relationship(regressor, "mse_avg", mse_avg)
    tx.merge(am)
    an = Relationship(regressor, "rmse_std", rmse_std)
    tx.merge(an)
    ao = Relationship(regressor, "rmse_avg", rmse_avg)
    tx.merge(ao)
    ap = Relationship(data, "time_std", time_std)
    tx.merge(ap)
    aq = Relationship(data, "time_avg", time_avg)
    tx.merge(aq)
    tx.commit()

# tx.run("MATCH (n:algo) WHERE n.algorithm = 'gdb' WITH COLLECT (n) AS ns CALL apoc.refactor.mergeNodes(ns) YIELD node RETURN node;")
# tx.commit()


