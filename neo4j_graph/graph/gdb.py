import pandas as pd
from py2neo import Graph, Node, Relationship
from graph import graph_dataframes as gd


def gdb(csv, algor="gdb"):
    """
    :param csv:
    :param algor:
    :return:
    """
    #
    graph = Graph("bolt://localhost:7687", user="neo4j", password="1234")
    graph_df = gd.GraphDataframe()
    label_df = graph_df.param_dataframe(csv, algor)
    model_df = graph_df.model_dataframe(csv, algor)
    # print(label_df['regressor'])
    param_dct = label_df.to_dict('records')  # Dict of dataframe for ml parameters
    model_dicts = model_df.to_dict('records')
    for i in range(len(param_dct)):
        tx = graph.begin()
        ml_dict = model_dicts[i]
        print('Creating model nodes number: ' + str(i))
        runs = Node("run_num", run=ml_dict['Run'])
        tx.create(runs)
        algo = Node("algo", algorithm=ml_dict['algorithm'])
        tx.create(algo)
        data = Node("data_ml", data=ml_dict['dataset'])
        tx.create(data)
        target = Node("targets", target=ml_dict['target'])
        tx.create(target)
        feat_meth = Node("featmeth", feat_meth=ml_dict['feat_meth'])
        tx.create(feat_meth)
        feat_time = Node("feattime", feat_time=ml_dict['feat_time'])
        tx.create(feat_time)
        tuned = Node("tuned", tuned=ml_dict['tuned'])
        tx.create(tuned)
        feature_list = Node("featurelist", feature_lists=ml_dict['feature_list'])
        tx.create(feature_list)
        regressor = Node("regress", regressor=ml_dict['regressor'])
        tx.create(regressor)
        tunetime = Node("tunetimes", tunetime=ml_dict['tuneTime'])
        tx.create(tunetime)
        r2_avg_label = Node("r2avg#", r2_avg_labels=ml_dict['r2_avgRun#'], r2_avg=ml_dict['r2_avg'])
        tx.create(r2_avg_label)
        r2_std_label = Node("r2std#", r2_std_label=ml_dict['r2_stdRun#'], r2_std=ml_dict['r2_std'])
        tx.create(r2_std_label)
        mse_avg_label = Node("mseavg#", mse_avg_label=ml_dict['mse_avgRun#'], mse_avg=ml_dict['mse_avg'])
        tx.create(mse_avg_label)
        mse_std_label = Node("msestd#", mse_std_label=ml_dict['mse_stdRun#'], mse_std=ml_dict['mse_std'])
        tx.create(mse_std_label)
        rmse_avg_label = Node("rmseavg#", rmse_avg_label=ml_dict['rmse_avgRun#'], rmse_avg=ml_dict['rmse_avg'])
        tx.create(rmse_avg_label)
        rmse_std_label = Node("rmsestd#", rmse_std_label=ml_dict['rmse_stdRun#'], rmse_std=ml_dict['rmse_std'])
        tx.create(rmse_std_label)
        time_avg = Node("timeavg", time_avg=ml_dict['time_avg'])
        tx.create(time_avg)
        time_std = Node("timestd", time_std=ml_dict['time_std'])
        tx.create(time_std)
        final_results = Node("results", result=ml_dict['Results'])
        tx.create(final_results)
        print('Creating Relationships Number ' + str(i))
        aa = Relationship(runs, "uses", algo)
        tx.merge(aa)
        ab = Relationship(runs, "uses", data)
        tx.merge(ab)
        ac = Relationship(data, "has", target)
        tx.merge(ac)
        ad = Relationship(runs, "generates", feat_meth)
        tx.merge(ad)
        ae = Relationship(feature_list, "feat_time", feat_time)
        tx.merge(ae)
        af = Relationship(feat_meth, "means", feature_list)
        tx.merge(af)
        ag = Relationship(tuned, "tuned", regressor)
        tx.merge(ag)
        ah = Relationship(algo, "params", regressor)
        tx.merge(ah)
        ai = Relationship(tuned, "tunetime", tunetime)
        tx.merge(ai)
        aj = Relationship(regressor, "gives", final_results)
        tx.merge(aj)
        ak = Relationship(final_results, "has", r2_avg_label)
        tx.merge(ak)
        am = Relationship(final_results, "has", r2_std_label)
        tx.merge(am)
        ao = Relationship(final_results, "has", mse_avg_label)
        tx.merge(ao)
        aq = Relationship(final_results, "has", mse_std_label)
        tx.merge(aq)
        at = Relationship(final_results, "has", rmse_avg_label)
        tx.merge(at)
        av = Relationship(final_results, "has", rmse_std_label)
        tx.merge(av)
        az = Relationship(algo, "tune", tuned)
        tx.merge(az)
        bb = Relationship(runs, "gives", final_results)
        tx.merge(bb)
        bc = Relationship(algo, "contributes to", final_results)
        tx.merge(bc)
        bd = Relationship(data, "contributes to", final_results)
        tx.merge(bd)
        be = Relationship(feat_meth, "contributes to", final_results)
        tx.merge(be)
        print('Creating param number: ' + str(i))
        loop_param = param_dct[i]
        learning_rate_label = Node("learningrate_label", learningrate_labels=loop_param["learning_rateRun#"],
                                   learning_rates=loop_param['learning_rate'])
        tx.create(learning_rate_label)
        max_depth_label = Node("maxdepth_label", maxdepth_label=loop_param["max_depthRun#"],
                               max_depth=loop_param['max_depth'])
        tx.create(max_depth_label)
        max_features_label = Node("maxfeatures_label", maxfeatures_label=loop_param["max_featuresRun#"],
                                  max_features=loop_param['max_features'])
        tx.create(max_features_label)
        min_samples_leaf_label = Node("minsamplesleaf_label", minleaf_label=loop_param["min_samples_leafRun#"],
                                      min_samples_leaf=loop_param['min_samples_leaf'])
        tx.create(min_samples_leaf_label)
        min_samples_split_label = Node("minsplit_label", minsplit_label=loop_param['min_samples_splitRun#'],
                                       min_samples_split=loop_param['min_samples_split'])
        tx.create(min_samples_split_label)
        n_estimators_label = Node("nestimators_label", nestimators_label=loop_param['n_estimatorsRun#'],
                                  n_estimators=loop_param['n_estimators'])
        tx.create(n_estimators_label)
        bf = Relationship(regressor, "has", learning_rate_label)
        tx.merge(bf)
        bh = Relationship(regressor, "has", max_depth_label)
        tx.merge(bh)
        bj = Relationship(regressor, "has", min_samples_split_label)
        tx.merge(bj)
        bl = Relationship(regressor, "has", min_samples_leaf_label)
        tx.merge(bl)
        tx.commit()
    return model_df
